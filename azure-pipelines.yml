# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- development

jobs:
  - job: Windows_VS2019_Build_Tools_v16_7_2_0
    pool:
      vmImage: 'windows-2019'
    steps:
    - script: git submodule update --recursive --init
      displayName: Recursively checkout submodules
    - task: ChocolateyCommand@0
      displayName: Install OpenSSL via Chocolatey
      inputs:
        command: 'install'
        installPackageId: 'openssl'
        installInstallArgs: '-y'
    - task: ChocolateyCommand@0
      displayName: Install VS2019 Build Tools (v16.7.2.0) via Chocolatey
      inputs:
        command: 'install'
        installPackageId: 'visualstudio2019buildtools'
        installInstallArgs: '-y'
        installParams: '--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --passive'
        installPackageVersion: '16.7.2.0'

        #extraArguments: '--package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64" --version '
    #- task: CmdLine@2
    #  displayName: Refresh Environment Variables
    #  inputs:
    #    script: refreshenv
    #    failOnStderr: true
    #- task: CmdLine@2
    #  inputs:
    #    script: |
    #      ls 'C:\'
    #      echo -----------------------------------------------------------------------
    #      ls 'C:\Program Files (x86)'
    #      echo -----------------------------------------------------------------------
    #      ls 'C:\Program Files (x86)\Microsoft Visual Studio'
    #      echo -----------------------------------------------------------------------
    #      ls 'C:\Program Files (x86)\Microsoft Visual Studio\2019'
    #      echo -----------------------------------------------------------------------
    #      ls 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools'
    #      echo -----------------------------------------------------------------------
    #      ls 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC'
    #      echo -----------------------------------------------------------------------
    #      ls 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary'
    #      echo -----------------------------------------------------------------------
    #      ls 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build'
    #      echo -----------------------------------------------------------------------
    #      ls 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build'
    #      echo -----------------------------------------------------------------------
    - task: BatchScript@1
      displayName: Setup VS Build Tools Environment
      inputs:
        filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsx86_amd64.bat'
        modifyEnvironment: true
        failOnStandardError: true
    - task: CMake@1
      displayName: CMake Configure
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '.. -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl'
    - task: CMake@1
      displayName: CMake Compile
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '--build . --target discpp'
  - job: Windows_Clang__v10_0_0
    pool:
      vmImage: 'windows-2019'
    steps:
      - script: git submodule update --recursive --init
        displayName: Recursively checkout submodules
      - task: ChocolateyCommand@0
        displayName: Install Clang via Chocolatey
        inputs:
          command: 'install'
          installPackageId: 'llvm'
          installInstallArgs: '-y'
          installPackageVersion: '10.0.0'
      - task: ChocolateyCommand@0
        displayName: Install OpenSSL via Chocolatey
        inputs:
          command: 'install'
          installPackageId: 'openssl'
          installInstallArgs: '-y'
      #- task: CmdLine@2
      #  displayName: Refresh Environment Variables
      #  inputs:
      #    script: refreshenv
      #    failOnStderr: true
      - task: CMake@1
        displayName: CMake Configure
        inputs:
          workingDirectory: 'build'
          cmakeArgs: '.. -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang++.exe" -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang.exe"'
      - task: CMake@1
        displayName: CMake Compile
        inputs:
          workingDirectory: 'build'
          cmakeArgs: '--build . --target discpp'
  - job: Linux_GCC_v7_5_0
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - script: git submodule update --recursive --init
        displayName: Recursively checkout submodules
      - task: CMake@1
        displayName: CMake Configure
        inputs:
          workingDirectory: 'build'
          cmakeArgs: '.. -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles"'
      - task: CMake@1
        displayName: CMake Compile
        inputs:
          workingDirectory: 'build'
          cmakeArgs: '--build . --target discpp'
