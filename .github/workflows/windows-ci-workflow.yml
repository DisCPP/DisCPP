on: [push, pull_request]
name: Windows CI

env:
  BUILD_TYPE: Debug

jobs:
  windows-vs2019-msvc:
    name: VS2019 MSVC (v19.27.29111.0)
    runs-on: windows-2019
    
    defaults:
      run:
        shell: cmd
    
    steps:
      - name: Checkout submodules and DisC++
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
        
      - name: Create Build Folder
        run: cmake -E make_directory ${{runner.workspace}}/DisCPP/build

      - id: cache-key
        name: Cache OpenSSL
        uses: actions/cache@v2
        with:
          path: |
            C:\ProgramData\Chocolatey\lib\openssl
            C:\Program Files\OpenSSL-Win64
          key: ${{ runner.os }}-choco-msvc-openssl

      - name: Install OpenSSL from Chocolatey
        if: steps.cache-key.outputs.cache-hit != 'true'
        uses: crazy-max/ghaction-chocolatey@v1.3.0
        with:
          args: install openssl -y

      - name: Add Environmental Variables for Cached OpenSSL
        if: steps.cache-key.outputs.cache-hit != 'false'
        # Incase we ever remove the `default: run: shell: cmd`
        shell: cmd
        run: |
          echo "C:\Program Files\OpenSSL-Win64\bin" >> $GITHUB_PATH
          echo "OPENSSL_CONF=C:\Program Files\OpenSSL-Win64\bin\openssl.cfg" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL-Win64" >> $GITHUB_ENV

      - uses: seanmiddleditch/gha-setup-vsdevenv@master

      - name: CMake Configure
        working-directory: ${{runner.workspace}}/DisCPP/build
        run: cmake ${{runner.workspace}}/DisCPP -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -G "MinGW Makefiles"
      
      - name: CMake Compile
        working-directory: ${{runner.workspace}}/DisCPP/build
        run: cmake --build . --parallel 10
  #windows-clang10:
  #  name: Clang v10.0.0
  #  runs-on: windows-2019
  #
  #  defaults:
  #    run:
  #      shell: cmd
  #
  #  steps:
  #    - name: Checkout submodules and DisC++
  #      uses: actions/checkout@v2
  #      with:
  #        submodules: 'recursive'
  #
  #    - name: Create Build Folder
  #      run: cmake -E make_directory ${{runner.workspace}}/DisCPP/build

  #    - id: cache-key
  #      name: Cache Clang and OpenSSL
  #      uses: actions/cache@v2
  #      with:
  #        path: |
  #          C:\ProgramData\Chocolatey\lib\openssl
  #          C:\ProgramData\Chocolatey\lib\llvm
  #          C:\Program Files\OpenSSL-Win64
  #          C:\Program Files\LLVM
  #        key: ${{ runner.os }}-choco-clang10-openssl

  #    - name: Install Clang from Chocolatey
  #      if: steps.cache-key.outputs.cache-hit != 'true'
  #      uses: crazy-max/ghaction-chocolatey@v1.3.0
  #      with:
  #        args: install llvm --version 10.0.0 -y
        
  #    - name: Install OpenSSL from Chocolatey
  #      if: steps.cache-key.outputs.cache-hit != 'true'
  #      uses: crazy-max/ghaction-chocolatey@v1.3.0
  #      with:
  #        args: install openssl -y

  #    - name: Add Environmental Variables for Cached OpenSSL and Clang
  #      if: steps.cache-key.outputs.cache-hit != 'false'
        # Incase we ever remove the `default: run: shell: cmd`
  #      shell: cmd
  #      run: |
  #        echo ::add-path::%programfiles%\OpenSSL-Win64\bin
  #        echo ::add-path::%programfiles%\LLVM\bin
  #        echo ::set-env name=OPENSSL_CONF::%programfiles%\OpenSSL-Win64\bin\openssl.cfg
  #        echo ::set-env name=OPENSSL_ROOT_DIR::%programfiles%\OpenSSL-Win64
        
  #    - name: CMake Configure
  #      working-directory: ${{runner.workspace}}/DisCPP/build
  #      run: cmake ${{runner.workspace}}/DisCPP -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang.exe" -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang++.exe" -G "MinGW Makefiles
      
  #    - name: CMake Compile
  #      working-directory: ${{runner.workspace}}/DisCPP/build
  #      run: cmake --build . --parallel 10